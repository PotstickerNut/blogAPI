const express = require("express");
const usersModel = require("../models/usersSchema");
const { check, validationResult } = require("express-validator");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const authMiddleware = require("../middleware/authMiddleware");

const router = express.Router();

/**
 * @swagger
 * components:
 *  schemas:
 *    User:
 *      type: object
 *      required:
 *        - user_type
 *        - username
 *        - email
 *      properties:
 *        id:
 *          type: string
 *          description: The autogenerated id of the user
 *        user_type:
 *          type: string
 *          description: Whether the user is a Super User or a Regular user
 *        username:
 *          type: string
 *          description: The username chosen by the user
 *        email:
 *          type: string
 *          description: Email of the user
 *      example:
 *        id: 62a8934b1fe50f2bc0759670
 *        user_type: Regular
 *        username: Moonbeam
 *        email: moonbeam@test.com
 *
 */

/**
 * @swagger
 * tags:
 *  name: Users
 *  description: The user managing API
 */

/**
 * @swagger
 * /users:
 *  get:
 *    summary: Returns a list of all the users
 *    tags: [Users]
 *    responses:
 *      200:
 *        description: The list of all the users
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/User'
 *      400:
 *        description: Bad request
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Blog'
 */

// =========== Get users =========
router.get("/", authMiddleware, async (req, res) => {
  try {
    const user = await usersModel.find();
    res.status(200).json(user);
  } catch (error) {
    console.error(error);
    res.status(400).json("Bad request");
  }
});

/**
 * @swagger
 * /users:
 *  post:
 *    summary: Creates users
 *    tags: [Users]
 *    responses:
 *      201:
 *        description: The user was created successfully
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/User'
 *      400:
 *        description: Bad request
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Blog'
 */
// ======== Create users =========
router.post(
  "/",
  [
    check("username", "Username is required"),
    check("email", "Please use a valid email").isEmail(),
    check(
      "password",
      "Please enter a password with 6 or more characters"
    ).notEmpty(),
    check(
      "password",
      "Please enter a password with 6 or more characters."
    ).isLength({ min: 6 }),
  ],
  async (req, res) => {
    const userData = req.body;
    const errors = validationResult(req);

    // Check for validation errors
    if (!errors.isEmpty()) {
      return res.status(400).json(errors.array());
    }

    try {
      const userExists = await usersModel.findOne({ email: userData.email });

      // If user exists
      if (userExists) {
        return res.json("User already exists");
      }

      // Create new user
      const SALT = await bcrypt.genSalt(12);

      const hashedPassword = await bcrypt.hash(userData.password, SALT);
      userData.password = hashedPassword;
      const user = await usersModel.create(userData);

      // Create a new JWT Token
      const payload = {
        id: user._id,
        email: user.email,
      };

      const TOKEN = jwt.sign(payload, process.env.SECRET_KEY, {
        expiresIn: "2 Days",
      });

      res.status(201).json({ user: user, token: TOKEN });
    } catch (error) {
      console.error(error);
      res.status(400).json("Bad request");
    }
  }
);

/**
 * @swagger
 * /users{id}:
 *  get:
 *    summary: Returns a list of all the users
 *    tags: [Users]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The user ID
 *    responses:
 *      200:
 *        description: The list of all the users
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/User'
 *      400:
 *        description: Bad request
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Blog'
 */
// ========== Get user by ID ==============
router.get("/:id", authMiddleware, async (req, res) => {
  const id = req.params.id;

  try {
    const user = await usersModel.findById(id);
    res.status(200).json(user);
  } catch (error) {
    console.error(error);
    res.status(400).json("Bad request");
  }
});

/**
 * @swagger
 * /users{id}:
 *  put:
 *    summary: Update user by ID
 *    tags: [Users]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The user ID
 *    responses:
 *      200:
 *        description: The user was updated successfully
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/User'
 *      400:
 *        description: Bad request
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Blog'
 */
// ============ Update user by ID ============
router.put("/:id", authMiddleware, async (req, res) => {
  const id = req.params.id;
  const newUserData = req.body;

  try {
    const user = await usersModel.findByIdAndUpdate(id, newUserData, {
      new: true,
    });
    res.status(202).json(user);
  } catch (error) {
    console.error(error);
    res.status(400).json("Bad request");
  }
});

/**
 * @swagger
 * /users{id}:
 *  delete:
 *    summary: deletes the user
 *    tags: [Users]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The user ID
 *    responses:
 *      200:
 *        description: The user was deleted successfully
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/User'
 *      400:
 *        description: Bad request
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Blog'
 */
//! ========== Delete user by ID ==========
router.delete("/:id", authMiddleware, async (req, res) => {
  const id = req.params.id;

  try {
    const user = await usersModel.findByIdAndDelete(id);
    res.status(200).json("User was deleted");
  } catch (error) {
    console.error(error);
    res.status(400).json("Bad request");
  }
});

module.exports = router;
